#!/usr/bin/env python

"""
For testing, do not need to be root.
"""

import sys, os, pwd
import platform
import re, glob

if os.path.exists('/home/student/yliow'):
   print("yliow ... halting")

if any(_ in sys.argv for _ in ['?', 'h', '-h', 'help', '--help', '-help']):
   print(r'''
to update your vm do one of the following:

* in your bash shell, login as root and execute "update-vm":
      su
      update-vm
* in your bash shell, login as root, go to ~/update-vm, execute make:
      su
      cd ~/update-vm
      make

WARNINGS:
* Original /root/.bashrc is renamed to /root/.bashrc.backup
* Original /home/[user]/.bashrc is renamed to /home/[user]/.bashrc.backup
* Original /home/[user]/.emacs.d/init.el is renamed to /home/[user]/emacs.d/init.el.backup
   
   ''')
   sys.exit()

def readfile(path):
    return open(path, 'r').read()
def writefile(path, s, format='utf-8'):
    f = open(path, 'wb'); f.write(s); f.close()

def get_user():
    return pwd.getpwuid(os.getuid())[0] 
user = get_user()

def get_os():
    s = open('/etc/os-release', 'r').read()
    return re.compile('REDHAT_BUGZILLA_PRODUCT_VERSION=(\d+)').search(s).group(1)
fedora_vers = get_os()
print(">>>> fedora version:", fedora_vers)

py_vers = platform.python_version().split(".")
print(">>>> python version: %s.%s" % (py_vers[0], py_vers[1]))

def get_users():
    os.system('ls /home/ > home.txt')
    s = readfile('home.txt')
    s = [_.strip() for _ in s.split('\n') if _.strip() != '']
    s = [_ for _ in s if _ != 'root']
    s = [_ for _ in s if os.path.exists('/home/%s/.bashrc' % _)]
    return s
users = get_users()
print(">>>> users found:", users)

# download data from github
def download():
    print(">>>> downloading update-vm-data ...", flush=True)
    os.system('rm -rf tmp; mkdir tmp; cd tmp; git clone http://github.com/yliow/update-vm-data; rm -rf tmp/update-vm-data/.git')

def system(cmd):
    """
    source [...] needed is .bashrc is changed (see bashrc() function).
    """
    print(">>>>", cmd)
    os.system('source /root/.bashrc; %s' % cmd)

def dnfinstall(names):
    if isinstance(names, str):
        names = [names]
    elif not isinstance(names, list):
        raise Exception("%s not str or list" % names)
    for name in names:  
        system('dnf install -y %s' % name)
        
def dnfremove(names):
   if isinstance(names, str):
      names = [names]
   for name in names:
      system('dnf remove %s' % name)

def bashrc():
    users = get_users()
    for u in users:
        print(">>>> install .bashrc for user '%s' (original version is renamed to .bashrc.backup) ..." % u)
        system('mv /home/%s/.bashrc /home/%s/.bashrc.backup'  % (u, u))
        system('cp tmp/update-vm-data/bashrc/.bashrc /home/%s/.bashrc' % u)
        system('chmod a+rwx /home/%s/.bashrc' % u) # WARNING: overkill

    # Add update-vm alias to root's .bashrc
    # assumes /root/.bashrc exists
    print(">>>> install .bashrc for 'root' (original version is renamed to .bashrc.backup) ...")
    system('mv /root/.bashrc /root/.bashrc.backup')
    system('cp tmp/update-vm-data/root-bashrc/.bashrc /root/.bashrc')
    system('chmod a+rwx /home/%s/.bashrc' % u) # WARNING: overkill
    return
    
    """ prev version: insert alias into .bashrc. Above is easier.
    s = readfile('/root/.bashrc')
    bashrc_line = """\nfunction update_vm() { cwd=$(pwd); cd /home/student; rm -rf update-vm; git clone http://github.com/yliow/update-vm; cd update-vm; python update $@; cd "${cwd}";};\nalias update-vm='update_vm'\n"""
    lines = s.split('\n')
    lines = [line for line in lines if 'update-vm' not in line or 'update_vm' not in line]
    s = '\n'.join(lines)
    # remove blank lines at the bottom
    s = s.rstrip(); s = s + '\n'
    if bashrc_line not in s:
        s += bashrc_line
        writefile('/root/.bashrc', s)
        system('chmod a+r /root/.bashrc; chmod u+w /root/.bashrc')
    """
    
def emacs():
    # 1. install emacs
    # 2. for each (non-root) user, copy init.el
    dnfinstall('emacs')
    for u in users:
        dir_ = '/home/%s/.emacs.d' % u
        if not os.path.isdir(dir_):
            system('mkdir %s' % dir_)
        system('cp %s %s' % (os.path.join(dir_, 'init.el'),
                             os.path.join(dir_, 'init.el.backup')))
        system('cd tmp/update-vm-data/emacs/; cp init.el %s' % dir_)
        system('chmod -R a+rwx %s' % dir_) 
        system('chown -R %s:%s %s' % (u, u, dir_)) 

def devtools():
    dnfinstall(['gcc',
                'gcc-c++',
                'libasan',
                'kernel-devel',
                'kernel-headers',
                'patch',
                'make',
                'binutils',
                'wget',
                'autoconf',
                'automake',
                'libtool',
                'python-devel', 
                'python3-devel',
                'zlib',  
                'gdb',
                'ddd',
                'meld',
                'tar',
                'gzip',
                'bzip2',
                'rsync',
                'firefox',
                'pluma',
                'caja',
                'atril',
                'git-core'])

def bloatware():
    dnfremove(['vinagre*',
               'tigervnc*',
               'simple-scan*',
               'thunderbird*',
               'transmission*'])

def texlive():
    dnfinstall(['texlive',
                'texlive-latex',
                'texlive-import',
                'texlive-lipsum',
                'texlive-lastpage',
                'texlive-upquote',
                'texlive-boxedminipage',
                'texlive-ulem',
                'texlive-cancel'])

def latex():
    """ TODO: change yliowtest to yliow """
    print(">>>> installing latex packages (yliow) ...", flush=True)
    system('rm -rf /usr/share/texlive/texmf-local/tex/latex/yliow')
    system('mkdir /usr/share/texlive/texmf-local/tex/latex/yliow')
    system('cd tmp/update-vm-data/; cp -r latex/yliow/* /usr/share/texlive/texmf-local/tex/latex/yliow/')
    system('chmod a+rwx /usr/share/texlive/texmf-local/tex/latex/yliow')
    system('texhash')
    system('chmod -R a+r /usr/share/texlive/texmf-config/ls-R') 
    system('chmod -R a+r /usr/share/texlive/texmf-dist/ls-R')
    system('chmod -R a+r /usr/share/texlive/texmf-local///ls-R') 
    system('chmod -R a+r /usr/share/texlive/texmf-var/ls-R')

def python():
    print(">>>> installing python packages ...", flush=True)
    site_packages = glob.glob('/usr/lib*/python*.*/site-packages/')
    for p in glob.glob('tmp/update-vm-data/python/*'): # use '*' to include dir case
        for site_package in site_packages:
            system('cp -r %s %s' % (p, site_package))
            system('chmod -R a+rwx %s' % os.path.join(site_package, os.path.split(p)[-1]))
            # create script symlink if p is "*.py"
            if p.endswith(".py"):     
                scriptname = os.path.split(p)[-1].split('.')[0] # example abc
                progpath = os.path.join(site_package, os.path.split(p)[-1]) # example: /usr/lib/python3.7/abc.py
                scriptpath = os.path.join('/usr/local/bin/', scriptname)
                if os.path.islink(scriptpath):
                    system('rm -rf %s' % scriptpath)
                cmd = 'ln -s %s %s' % (progpath, scriptpath)
                system('ln -s %s %s' % (progpath, scriptpath))
                  
# alex
# WARNING: Do not delete ~/.alex in case there's a ~/.alex/alex config file
# WARNING: alex is installed for all users (except root)
def alex():
    print(">>>> installing alex ...", flush=True)
    users = get_users()
    
    writefile('tmp/update-vm-data/alex/import_alex.py', "import alex")

    for u in users:
        print(">>>> install alex for user '%s' ..." % u)
        if not os.path.isdir('/home/%s/.alex' % u):
            system('mkdir /home/%s/.alex' % u)
        system('chmod a+rwx /home/%s/.alex' % u)
        system('cd tmp/update-vm-data/alex; cp alexrunner.py /home/%s/.alex/' % u)
        system('cd tmp/update-vm-data/alex; python3 import_alex.py; rm -rf import_alex.py')
        system('cd tmp/update-vm-data/alex; cp __pycache__/*.pyc /home/%s/.alex/alex.pyc' % u)
        system('chmod a+rwx /home/%s/.alex/*' % u)
        # update .bashrc
        s = readfile('/home/%s/.bashrc' % u)
        t = "alias alex='python /home/%s/.alex/alexrunner.py'" % u
        if t not in s:
            print(">>>> ~/.bashrc is backed up as ~/.bashrc.backup")
            system('cp /home/%s/.bashrc /home/%s/.bashrc.backup' % (u, u))
            s += '\n' + t + '\n'
            f = open('/home/%s/.bashrc' % u, 'w'); f.write(s); f.close()

# course specific
def ciss145():
    dnfinstall('python-pygame')

def ciss245():
    dnfinstall(['SDL',
                'SDL-devel', 
                'SDL_gfx-devel',
                'SDL_net-devel',
                'SDL-static',
                'SDL_sound-devel',
                'SDL_image-devel',
                'SDL_ttf-devel',
                'SDL_mixer-devel'])

def ciss380():
    dnfinstall(['freeglut',
                'freeglut-devel',
                'glew',
                'glew-devel',
                'glm-devel',
                'assimp-devel'])

def ciss430():
    dnfinstall(['httpd',
                'mysql',
                'mysql-server',
                'mysql-devel',
                'phpmyadmin',
                'python-PyMySQL',
                'python-sqlalchemy',
                'mod_wsgi'])

def ciss445():
    dnfinstall('ocaml')

def everything():
    bashrc()
    emacs()
    devtools()
    texlive()
    latex()
    python()
    alex()
    ciss145()
    ciss245()
    ciss380()
    ciss430()
    ciss445()

def clean():
    print(">>>> clean ...")
    system('rm -rf tmp')

def tests():
    print(">>>> Testing g++:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() == 'q': sys.exit()
    system('cd tests/cpp/; make')
    
    print(">>>> Testing python:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() == 'q': sys.exit()
    system('cd tests/python/; make')
    
    print(">>>> Testing latex:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() == 'q': sys.exit()
    system('cd tests/latex/; make')

    print(">>>> Testing opengl:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() == 'q': sys.exit()
    system('cd tests/opengl/; make')
   
maps = {'bashrc':[bashrc],
        'emacs':[emacs],
        'devtools':[devtools],
        'bloatware':[bloatware],
        'texlive':[texlive],
        'latex':[latex],
        'python':[python],
        'alex':[alex],
        'ciss145':[ciss145],
        'ciss245':[ciss245],
        'ciss380':[ciss380],
        'ciss430':[ciss430],
        'ciss445':[ciss445],
        'all':[everything],
        'tests':[tests],
}
               
if len(sys.argv) == 1:
    sys.argv.append('all')



download()
for argv in sys.argv[1:]:
    if argv == 'tests':
        pass
    else:
        if user != 'root':
           print("login as root and run update-vm (or go to ~/update-vm and run make)")
           sys.exit()
           
    if argv in maps:
        for f in maps[argv]:
            f()
    else:
        print("unknown arg %s" % argv)   
clean()
print(">>>> done!!!")
print()
print(">>>> to update your vm, login as root and execute update-vm (in any dir).")
print()
