#!/usr/bin/env python

HELP = r'''
To update your vm do one of the following:
(1) In your bash shell, execute:
      su                [enter root password]
      update-vm
    If (1) does not work, then "update-vm" is not installed. Go to (2).
(2) In your bash shell, execute:
      su                [enter root password]
      cd /home/student
      rm -rf update-vm
      git clone http://github.com/yliow/update-vm
      cd update-vm
      python update     

To test the update, as "student" user do
(1) In your bash shell, execute:
      update-vm tests

WARNINGS:
* Data for update will be stored in /home/student/update-vm, i.e., this assumes that "student" is a user.
* Original /root/.bashrc is renamed to /root/.bashrc.backup
* Original /home/[user]/.bashrc is renamed to /home/[user]/.bashrc.backup
* Original /home/[user]/.emacs.d/init.el is renamed to /home/[user]/emacs.d/init.el.backup

'''

import sys, os, pwd
import platform
import re, glob

def get_user():
    return pwd.getpwuid(os.getuid())[0] 
USER = get_user()

def system(cmd, verbose=True):
    """
    source [...] needed if .bashrc is changed (see bashrc() function).
    TODO: need to allow choice of .bashrc
    """
    if verbose: print(">>>>", cmd)
    if USER == 'root':
        os.system('source /root/.bashrc; %s' % cmd)
    else:
        os.system('source /home/%s/.bashrc; %s' % (USER, cmd))

def dnfinstall(names):
    if isinstance(names, str):
        names = [names]
    elif not isinstance(names, list):
        raise Exception("%s not str or list" % names)
    for name in names:  
        system('dnf install -y %s' % name)
        
def dnfremove(names):
    if isinstance(names, str):
        names = [names]
    elif not isinstance(names, list):
        raise Exception("%s not str or list" % names)
    for name in names:
        system('dnf remove %s' % name)

def readfile(path):
    return open(path, 'r').read()
def writefile(path, s, format='utf-8'):
    f = open(path, 'w'); f.write(s); f.close()

def get_os():
    s = open('/etc/os-release', 'r').read()
    return re.compile('REDHAT_BUGZILLA_PRODUCT_VERSION=(\d+)').search(s).group(1)
FEDORA_VERS = get_os()

PY_VERS = platform.python_version().split(".")

def get_users():
    system('ls /home/ > home.txt', verbose=False)
    s = readfile('home.txt')
    s = [_.strip() for _ in s.split('\n') if _.strip() != '']
    s = [_ for _ in s if _ != 'root']
    s = [_ for _ in s if os.path.exists('/home/%s/.bashrc' % _)]
    system('rm -f home.txt', verbose=False)    
    return s
USERS = get_users()

        
def download():
    # download update-vm-data to tmp
    # assume this is executed in /home/student/update-vm/ 
    print(">>>> downloading update-vm-data ...", flush=True)
    system('rm -rf tmp; mkdir tmp; cd tmp; git clone http://github.com/yliow/update-vm-data; rm -rf tmp/update-vm-data/.git')
    system('chmod -R a+rwx /home/student/update-vm')

def bashrc():
    for u in USERS:
        print(">>>> install .bashrc for user '%s' (original is renamed to .bashrc.backup) ..." % u)
        system('cp /home/%s/.bashrc /home/%s/.bashrc.backup'  % (u, u))
        system('cp tmp/update-vm-data/bashrc/.bashrc /home/%s/.bashrc' % u)
        system('chmod a+rwx /home/%s/.bashrc' % u) # WARNING: overkill

def rootbashrc():
    # Add "update-vm" alias to root's .bashrc
    # assumes /root/.bashrc exists
    print(">>>> install .bashrc for 'root' (original is renamed to .bashrc.backup) ...")
    system('cp /root/.bashrc /root/.bashrc.backup')
    system('cp tmp/update-vm-data/root-bashrc/.bashrc /root/.bashrc')
    system('chmod a+rwx /root/.bashrc') # WARNING: overkill
    return
    
    ''' previous version: insert alias into .bashrc. Above is easier.
    s = readfile('/root/.bashrc')
    bashrc_line = """\nfunction update_vm() { cwd=$(pwd); cd /home/student; rm -rf update-vm; git clone http://github.com/yliow/update-vm; cd update-vm; python update $@; cd "${cwd}";};\nalias update-vm='update_vm'\n"""
    lines = s.split('\n')
    lines = [line for line in lines if 'update-vm' not in line or 'update_vm' not in line]
    s = '\n'.join(lines)
    # remove blank lines at the bottom
    s = s.rstrip(); s = s + '\n'
    if bashrc_line not in s:
        s += bashrc_line
        writefile('/root/.bashrc', s)
        system('chmod a+r /root/.bashrc; chmod u+w /root/.bashrc')
    '''
    
def emacs():
    # 1. install emacs
    # 2. for each (non-root) user, copy init.el
    dnfinstall('emacs')
    for u in USERS:
        dir_ = '/home/%s/.emacs.d' % u
        if not os.path.isdir(dir_):
            system('mkdir %s' % dir_)
        system('cp %s %s' % (os.path.join(dir_, 'init.el'),
                             os.path.join(dir_, 'init.el.backup')))
        system('cd tmp/update-vm-data/emacs/; cp init.el %s' % dir_)
        system('chmod -R a+rwx %s' % dir_) # WARNING: overkill
        system('chown -R %s:%s %s' % (u, u, dir_)) 

def devtools():
    dnfinstall(['gcc',
                'gcc-c++',
                'libasan',
                'kernel-devel',
                'kernel-headers',
                'patch',
                'make',
                'binutils',
                'wget',
                'autoconf',
                'automake',
                'libtool',
                'python-devel', 
                'python3-devel',
                'zlib',  
                'gdb',
                'ddd',
                'meld',
                'tar',
                'gzip',
                'bzip2',
                'rsync',
                'firefox',
                'pluma',
                'caja',
                'atril',
                'git-core'])

def bloatware():
    dnfremove(['vinagre*',
               'tigervnc*',
               'simple-scan*',
               'thunderbird*',
               'transmission*'])

def texlive():
    dnfinstall(['texlive',
                'texlive-latex',
                'texlive-import',
                'texlive-lipsum',
                'texlive-lastpage',
                'texlive-upquote',
                'texlive-boxedminipage',
                'texlive-ulem',
                'texlive-cancel',
                'texlive-mathpartir',
                'texlive-comment',
                'texlive-mleftright',
                'texlive-pythontex',
                'texlive-tikz-cd'])

def latex():
    """ TODO: change yliowtest to yliow """
    print(">>>> installing latex packages (yliow) ...", flush=True)
    system('rm -rf /usr/share/texlive/texmf-local/tex/latex/yliow')
    print('>>>> mkdir /usr/share/texlive/texmf-local/tex/latex/yliow')
    #system('mkdir /usr/share/texlive/texmf-local/tex/latex/yliow')
    os.makedirs('/usr/share/texlive/texmf-local/tex/latex/yliow')
    
    system('cd tmp/update-vm-data/; cp -r latex/yliow/* /usr/share/texlive/texmf-local/tex/latex/yliow/')
    system('chmod a+rwx /usr/share/texlive/texmf-local/tex/latex/yliow')
    system('texhash')
    system('chmod -R a+r /usr/share/texlive/texmf-config/ls-R') 
    system('chmod -R a+r /usr/share/texlive/texmf-dist/ls-R')
    system('chmod -R a+r /usr/share/texlive/texmf-local///ls-R') 
    system('chmod -R a+r /usr/share/texlive/texmf-var/ls-R')
    
    system('texhash')
    system('chmod -R a+rwx /usr/share/texlive/texmf-config/ls-R') 
    system('chmod -R a+rwx /usr/share/texlive/texmf-dist/ls-R')
    system('chmod -R a+rwx /usr/share/texlive/texmf-local///ls-R') 
    system('chmod -R a+rwx /usr/share/texlive/texmf-var/ls-R')
    system('texhash')

def python():
    print(">>>> installing python packages ...", flush=True)
    site_packages = glob.glob('/usr/lib*/python*.*/site-packages/')
    for p in glob.glob('tmp/update-vm-data/python/*'): # use '*' to include dir case
        for site_package in site_packages:
            system('cp -r %s %s' % (p, site_package))
            system('chmod -R a+rwx %s' % os.path.join(site_package, os.path.split(p)[-1])) # WARNING: overkill
            # create script symlink if p is "*.py"
            if p.endswith(".py"):     
                scriptname = os.path.split(p)[-1].split('.')[0] # example abc
                progpath = os.path.join(site_package, os.path.split(p)[-1]) # example: /usr/lib/python3.7/abc.py
                scriptpath = os.path.join('/usr/local/bin/', scriptname)
                if os.path.islink(scriptpath):
                    system('rm -rf %s' % scriptpath)
                cmd = 'ln -s %s %s' % (progpath, scriptpath)
                system('ln -s %s %s' % (progpath, scriptpath))
                  
# alex
# WARNING: Do not delete ~/.alex in case there's a ~/.alex/alex config file
# WARNING: alex is installed for all users (except root)
def alex():
    print(">>>> installing alex ...", flush=True)
    
    writefile('tmp/update-vm-data/alex/import_alex.py', "import alex")

    for u in USERS:
        print(">>>> install alex for user '%s' ..." % u)
        if not os.path.isdir('/home/%s/.alex' % u):
            system('mkdir /home/%s/.alex' % u)
        system('chmod a+rwx /home/%s/.alex' % u)
        system('cd tmp/update-vm-data/alex; cp alexrunner.py /home/%s/.alex/' % u)
        system('cd tmp/update-vm-data/alex; python3 import_alex.py; rm -rf import_alex.py')
        system('cd tmp/update-vm-data/alex; cp __pycache__/*.pyc /home/%s/.alex/alex.pyc' % u)
        system('chmod a+rwx /home/%s/.alex/*' % u) # WARNING: overkill
        # update .bashrc
        s = readfile('/home/%s/.bashrc' % u)
        t = "alias alex='python /home/%s/.alex/alexrunner.py'" % u
        if t not in s:
            print(">>>> ~/.bashrc is backed up as ~/.bashrc.backup")
            system('cp /home/%s/.bashrc /home/%s/.bashrc.backup' % (u, u))
            s += '\n' + t + '\n'
            f = open('/home/%s/.bashrc' % u, 'w'); f.write(s); f.close()

# course specific
def ciss145():
    dnfinstall('python-pygame')

def ciss245():
    dnfinstall(['SDL',
                'SDL-devel', 
                'SDL_gfx-devel',
                'SDL_net-devel',
                'SDL-static',
                'SDL_sound-devel',
                'SDL_image-devel',
                'SDL_ttf-devel',
                'SDL_mixer-devel'])

def ciss380():
    dnfinstall(['freeglut',
                'freeglut-devel',
                'glew',
                'glew-devel',
                'glm-devel',
                'assimp-devel'])

def ciss430():
    dnfinstall(['httpd',
                'mysql',
                'mysql-server',
                'mysql-devel',
                'phpmyadmin',
                'python-PyMySQL',
                'python-sqlalchemy',
                'mod_wsgi'])

def ciss445():
    dnfinstall('ocaml')

def everything():
    rootbashrc()
    bashrc()
    emacs()
    devtools()
    texlive()
    latex()
    python()
    alex()
    ciss145()
    ciss245()
    ciss380()
    ciss430()
    ciss445()

def clean():
    print(">>>> clean ...")
    system('rm -rf tmp')

def tests():
    if USER == 'root':
        print(">>>> root will not see pdf docs by default and cannot run alex")
        x = input("press enter to continue or q to quit: ")
        if x.strip() in ['q','Q']: sys.exit()
        
    print(">>>> Testing g++:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() in ['q','Q']: sys.exit()
    system('cd tests/cpp/; make')
    
    print(">>>> Testing python:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() in ['q', 'Q']: sys.exit()
    system('cd tests/python/; make')
    
    print(">>>> Testing latex (assignment):")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() in ['q', 'Q']: sys.exit()
    system('cd tests/latex/test0; make')
    
    print(">>>> Testing latex (quiz):")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() in ['q', 'Q']: sys.exit()
    system('cd tests/latex/test1; make')

    print(">>>> Testing alex:")
    x = input("press enter to continue or q to quit (root will not be able to run alex): ")
    if x.strip() in ['q', 'Q']: sys.exit()
    system('cd tests/alex/; make')

    print(">>>> Testing opengl:")
    x = input("press enter to continue or q to quit (you should not see error messages): ")
    if x.strip() in ['q', 'Q']: sys.exit()
    system('cd tests/opengl/; make')

    
   
maps = {'rootbashrc':[rootbashrc],
        'bashrc':[bashrc],
        'emacs':[emacs],
        'devtools':[devtools],
        'bloatware':[bloatware],
        'texlive':[texlive],
        'latex':[latex],
        'python':[python],
        'alex':[alex],
        'ciss145':[ciss145],
        'ciss245':[ciss245],
        'ciss380':[ciss380],
        'ciss430':[ciss430],
        'ciss445':[ciss445],
        'all':[everything],
        'tests':[tests],
}
               

if __name__ == '__main__':
    # assumes this is executed in /home/student/update-vm/

    if os.path.exists('/home/student/yliow'):
        print("yliow ... halting")

    # just to be safe (although this is also done in "update-vm" alias, mkdir update-vm
    cwd = os.getcwd()
    if not os.path.isdir('/home/student/update-vm'):
        system('mkdir /home/student/update-vm')
    os.chdir('/home/student/update-vm')
   
    if any(_ in sys.argv for _ in ['?', 'h', '-h', 'help', '--help', '-help']):
        print(HELP)
        sys.exit()
   
    if len(sys.argv) == 1:
        sys.argv.append('all')

    print(">>>> user:", USER)
    print(">>>> fedora version:", FEDORA_VERS)
    print(">>>> python version: %s.%s" % (PY_VERS[0], PY_VERS[1]))
    print(">>>> users found:", USERS)

    download()
    for argv in sys.argv[1:]:
        if argv == 'tests':
            pass
        else:
            if USER != 'root':
               print("Login as root to update. Here's the help:\n%s:" % HELP)
               sys.exit()
               
        if argv in maps:
            for f in maps[argv]:
                f()
        else:
            print(">>>> unknown arg %s" % argv)   
    clean()
    print(">>>> done!!!")
    print()
    print(">>>> to update your vm, login as root and execute update-vm (in any dir).")
    print()
    os.chdir(cwd)
