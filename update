#!/usr/bin/env python

import sys, os, pwd
import platform
import re, glob

if os.path.exists('/home/student/yliow'):
   print("yliow ... halting")

def get_user():
    return pwd.getpwuid(os.getuid())[0] 
user = get_user()
if user != 'root':
    print("login as root and run again")
    sys.exit()

def get_os():
    s = open('/etc/os-release', 'r').read()
    return re.compile('REDHAT_BUGZILLA_PRODUCT_VERSION=(\d+)').search(s).group(1)
fedora_vers = get_os()
print(">>>> fedora version:", fedora_vers)

py_vers = platform.python_version().split(".")
print(">>>> python version: %s.%s" % (py_vers[0], py_vers[1]))

def get_users():
    os.system('ls /home/ > home.txt')
    f = open('home.txt', 'r')
    s = f.read()
    f.close()
    s = [_.strip() for _ in s.split('\n') if _.strip() != '']
    return [_ for _ in s if _ != 'root']
users = get_users()
print(">>>> users found:", users)


def dnfinstall(names):
    if isinstance(names, str):
        names = [names]
    elif not isinstance(names, list):
        raise Exception("%s not str or list" % names)
    for name in names:  
        os.system('dnf install -y %s' % name)

        
def emacs():
    # 1. install emacs
    # 2. for each (non-root) user, copy init.el
    dnfinstall('emacs')
    for u in users:
        dir_ = '/home/%s/.emacs.d' % u
        if not os.path.isdir(dir_):
            os.system('mkdir %s' % dir_)
        cmd = 'cd tmp/update-vm-data/emacs/; cp init.el %s' % dir_
        print(">>>>", cmd)
        os.system(cmd)
        os.system('chmod -R a+rwx %s' % dir_) 
        os.system('chown -R %s:%s %s' % (u, u, dir_)) 

def ciss145():
    dnfinstall('pygame')

def ciss245():
    dnfinstall(['SDL',
                'SDL-devel', 
                'SDL_gfx-devel',
                'SDL_net-devel',
                'SDL-static',
                'SDL_sound-devel',
                'SDL_image-devel',
                'SDL_ttf-devel',
                'SDL_mixer-devel'])

def ciss380():
    dnfinstall(['freeglut',
                'freeglut-devel',
                'glew',
                'glew-devel',
                'glm-devel',
                'assimp-devel'])

def ciss445():
    dnfinstall('ocaml')

def ciss430():
    dnfinstall(['httpd',
                'mysql',
                'mysql-server',
                'mysql-devel',
                'phpmyadmin',
                'MySQL-python',
                'python-sqlalchemy',
                'mod_wsgi'])

def texlive():
    dnfinstall(['texlive',
                'texlive-latex',
                'texlive-import',
                'texlive-lipsum',
                'texlive-lastpage',
                'texlive-upquote',
                'texlive-boxedminipage',
                'texlive-ulem',
                'texlive-cancel'])

def devtools():
    dnfinstall(['gcc',
                'gcc-c++',
                'libasan',
                'kernel-devel',
                'kernel-headers',
                'patch',
                'make',
                'binutils',
                'wget',
                'autoconf',
                'automake',
                'libtool',
                'python-devel', 
                'python3-devel',
                'zlib',  
                'gdb',
                'ddd',
                'meld',
                'tar',
                'gzip',
                'bzip2',
                'rsync',
                'firefox',
                'pluma',
                'caja',
                'atril',
                'git-core'])

def dnfremove(names):
   if isinstance(names, str):
      names = [names]
   for name in names:
      os.system('dnf remove %s' % name)
      
def remove_bloatware():
    dnfremove(['vinagre',
               'tigervnc',
               'simple-scan',
               'thunderbird'])
              
# install fedora packages
def initial():
    emacs()
    devtools()
    ciss145()
    ciss245()
    ciss380()
    ciss430()
    css445()
    texlive()

# download data from github
def download():
    print(">>>> downloading update-vm-data ...", flush=True)
    os.system('rm -rf tmp; mkdir tmp; cd tmp; git clone http://github.com/yliow/update-vm-data; rm -rf tmp/update-vm-data/.git')

# latex
def latex():
    """ TODO: change yliowtest to yliow """
    print(">>>> installing latex packages ...", flush=True)
    os.system('rm -rf /usr/share/texlive/texmf-local/tex/latex/yliowtest')
    os.system('mkdir /usr/share/texlive/texmf-local/tex/latex/yliowtest')
    os.system('cd tmp/update-vm-data/; cp -r latex/yliow/* /usr/share/texlive/texmf-local/tex/latex/yliowtest/')
    os.system('chmod a+rwx /usr/share/texlive/texmf-local/tex/latex/yliowtest')
    os.system('texhash')
    os.system('chmod -R a+r /usr/share/texlive/texmf-config/ls-R') 
    os.system('chmod -R a+r /usr/share/texlive/texmf-dist/ls-R')
    os.system('chmod -R a+r /usr/share/texlive/texmf-local///ls-R') 
    os.system('chmod -R a+r /usr/share/texlive/texmf-var/ls-R')

# python
def python():
    print(">>>> installing python packages ...", flush=True)
    for p in ['/usr/lib/python*.*', '/usr/lib64/python*.*']:
        os.system('cd tmp/update-vm-data/; cp -r python/* %s/site-packages/' % p)
        os.system('chmod -R a+rwx %s/site-packages/*' % p)

# alex
# WARNING: Do not delete ~/.alex in case there's a ~/.alex/alex config file
# WARNING: alex is installed for all users (except root)
def alex():
    print(">>>> installing alex ...", flush=True)
    users = get_users()
    
    f = open('tmp/update-vm-data/alex/import_alex.py', 'w')
    f.write("import alex"); f.close()

    for user in users:
        print(">>>> install alex for user '%s' ..." % user)
        if not os.path.isdir('/home/%s/.alex' % user):
            os.system('mkdir /home/%s/.alex' % user)
        os.system('chmod a+rwx /home/%s/.alex' % user)
        os.system('cd tmp/update-vm-data/alex; cp alexrunner.py /home/%s/.alex/' % user)
        os.system('cd tmp/update-vm-data/alex; python3 import_alex.py; rm -rf import_alex.py')
        os.system('cd tmp/update-vm-data/alex; cp __pycache__/*.pyc /home/%s/.alex/alex.pyc' % user)
        os.system('chmod a+rwx /home/%s/.alex/*' % user)
        # update .bashrc
        os.system('cp /home/%s/.bashrc /home/%s/.bashrc.backup' % (user, user))
        f = open('/home/%s/.bashrc' % user, 'r')
        s = f.read()
        f.close()
        t = "alias alex='python /home/%s/.alex/alexrunner.py'" % user
        if t not in s:
            s += '\n' + t + '\n'
            f = open('/home/%s/.bashrc' % user, 'w'); f.write(s); f.close()


download()
emacs()
#initial()
#download()
#latex()
#python()
#alex()
#os.system('rm -rf tmp')
#remove_bloatware()

